{"ast":null,"code":"import { parseAlphabet, parseTransition } from \"./DFAModel\";\nexport class Pair {\n  constructor(left, right) {\n    this.left = left;\n    this.right = right;\n  }\n\n  equalTo(other) {\n    if (this.left === other.left && this.right === other.right) return true;\n    return false;\n  }\n\n}\nexport class NFAState {\n  constructor(name) {\n    this.name = name;\n    this.accepting = false;\n    this.connected = false;\n    this.conn = [];\n    this.transitions = [];\n    this.destOf = [];\n  }\n\n  addTrans(symbol, dest) {\n    this.transitions.push(new Pair(symbol, dest));\n  }\n\n  getAllTrans() {\n    return this.transitions;\n  } // return an array of only epsilon transitions\n\n\n  getEpsilonTrans() {\n    let ret_list = [];\n\n    for (let i in this.transitions) {\n      let ts = this.transitions[i];\n\n      if (ts.left === \"eps\") {\n        ret_list.push(ts);\n      }\n    }\n\n    return ret_list;\n  } // return an array of only non-epsilon transitions\n\n\n  getSymbolTrans(sym) {\n    let ret_list = [];\n\n    for (let i in this.transitions) {\n      let ts = this.transitions[i];\n\n      if (ts.left === sym) {\n        ret_list.push(ts);\n      }\n    }\n\n    return ret_list;\n  }\n\n  addDestOf(state, symbol) {\n    let newPair = new Pair(state, symbol);\n    this.destOf.push(newPair);\n  }\n\n}\nexport class NFAModel {\n  constructor(initial, accepting, all_states, alphabet, transitions) {\n    console.log(\"NFA Model:\");\n    this.all = parseNFAStates(all_states);\n    this.initial = null;\n    this.accepting = [];\n    this.alphabet = parseAlphabet(alphabet);\n    this.transitions = parseTransition(transitions);\n    this.current = new Set();\n    this.syms = null;\n    this.states = null;\n    this.error = null;\n    this.setPath = [];\n    this.input = null;\n    this.acceptance_result = null;\n    console.log(\"initial: \", initial);\n    console.log(\"accepting: \", accepting);\n    console.log(\"states: \", all_states);\n    console.log(\"alphabet: \", alphabet);\n    console.log(\"transitions: \", transitions); // check components and alert if error\n\n    if (!this.checkAlphabet()) {\n      window.alert(this.error);\n    } else if (!this.checkStates()) {\n      window.alert(this.error);\n    } else if (!this.checkInitial(initial)) {\n      window.alert(this.error);\n    } else if (!this.checkAccepting(accepting)) {\n      window.alert(this.error);\n    } else if (!this.checkTransitions()) {\n      window.alert(this.error);\n    } else {\n      // make Connected for all and check\n      this.makeConnected(this.initial);\n\n      for (let i in this.all) {\n        let s = this.all[i];\n\n        if (!s.connected) {\n          console.log(\"State \" + s.name + \" is not reachable.\");\n        }\n      }\n    }\n  } // once checkInputString has run, determine whether or not to accept input\n\n\n  acceptString() {\n    let ret_path = []; //console.log(this.setPath);\n\n    for (let a of this.current) {\n      if (a.accepting) {\n        // create acceptance visualization and add it to end of path\n        let accept_state = new NFAState(\"üôÇ\");\n        let acceptance = new Pair(\"‚úîÔ∏è\", accept_state);\n        ret_path.push(acceptance);\n        this.acceptance_result = true;\n        return ret_path;\n      }\n    } // if not accepting, create fail visualization and add it to end of path\n\n\n    let fail_state = new NFAState(\"üôÅ\");\n    let failure = new Pair(\"‚ùå\", fail_state);\n    ret_path.push(failure);\n    this.acceptance_result = false;\n    return ret_path;\n  } // given an input string, simulate it in the NFA model\n\n\n  checkInputString(input) {\n    // create Set to represent next states and initialize current Set to initial state\n    let next = new Set();\n    this.current = new Set().add(this.initial);\n    this.input = input; // add all epsilon transitons from initial state\n\n    let eps_trans = this.initial.getEpsilonTrans();\n\n    if (eps_trans.length !== 0) {\n      this.setPath.push(this.current);\n\n      for (let trans of eps_trans) {\n        next.add(trans.right);\n      }\n\n      for (let a of next) {\n        let next_eps = a.getEpsilonTrans();\n\n        if (next_eps.length !== 0) {\n          for (let trans of next_eps) {\n            next.add(trans.right);\n          }\n        }\n      }\n\n      next.add(this.initial);\n      this.current = next;\n      this.setPath.push(this.current);\n    } // loop through input\n\n\n    while (input.length > 0) {\n      let str = input.substring(0, 1);\n      input = input.substring(1);\n      let next = new Set();\n      let passing = new Set();\n\n      for (let a of this.current) {\n        let sym_trans = a.getSymbolTrans(str);\n        let eps_trans = a.getEpsilonTrans();\n\n        if (sym_trans.length !== 0) {\n          for (let trans of sym_trans) {\n            next.add(trans.right);\n            passing.add(a);\n          }\n        }\n\n        if (eps_trans.length !== 0) {\n          passing.add(a);\n        }\n      } // if there are no possible next states for the input, the input is rejected\n\n\n      if (next.size === 0 && input.length !== 0) {\n        console.log(\"no possible next states\");\n        let ret_path = [new Pair(\"\", this.initial)];\n        let fail_state = new NFAState(\"üôÅ\");\n        let failure = new Pair(\"‚ùå\", fail_state);\n        ret_path.push(failure);\n        this.acceptance_result = false;\n        return ret_path;\n      }\n\n      for (let b of next) {\n        let eps_trans = b.getEpsilonTrans();\n\n        if (eps_trans !== 0) {\n          for (let trans of eps_trans) {\n            next.add(trans.right);\n            passing.add(b);\n          }\n        }\n      }\n\n      for (let stt of this.current) {\n        if (!passing.has(stt)) {\n          this.current.delete(stt);\n        }\n      }\n\n      this.setPath.push(this.current);\n      this.current = next;\n    }\n\n    this.setPath.push(this.current);\n    return this.acceptString();\n  } // Checks alphabet for repeated symbols or being empty\n\n\n  checkAlphabet() {\n    if (this.alphabet.length === 0) {\n      this.error = \"Empty alphabet\";\n      return false;\n    }\n\n    let symbols = new Set();\n    symbols.add(\"eps\");\n\n    for (let i in this.alphabet) {\n      let s = this.alphabet[i];\n\n      if (symbols.has(s)) {\n        this.error = \"Duplicate in alphabet: \" + s;\n        return false;\n      }\n\n      symbols.add(s);\n    }\n\n    this.syms = symbols;\n    return true;\n  } // Checks states for repeats or conflicts with alphabet\n  // Creates a Map of state names to States (this.states)\n\n\n  checkStates() {\n    if (this.all.length === 0) {\n      this.error = \"Empty States\";\n      return false;\n    }\n\n    let states = new Map();\n\n    for (let i in this.all) {\n      let s = this.all[i];\n\n      if (states.has(s.name) || this.syms.has(s.name)) {\n        this.error = \"Conflicting state name: \" + s.name;\n        return false;\n      }\n\n      states.set(s.name, s);\n    }\n\n    this.states = states;\n    return true;\n  } // Checks that initial state is a valid state and assigns this.initial to the State\n\n\n  checkInitial(initial) {\n    if (this.states.has(initial)) {\n      this.initial = this.states.get(initial);\n      this.initial.connected = true;\n      return true;\n    }\n\n    this.error = \"Invalid initial state\";\n    return false;\n  } // Checks that accepting states are present and valid\n  // Creates an array of the appropriate accepting States in this.accepting\n\n\n  checkAccepting(accepting) {\n    let acc_array = parseAlphabet(accepting);\n\n    if (acc_array.length === 0) {\n      this.error = \"Empty accepting states\";\n      return false;\n    }\n\n    for (let i in acc_array) {\n      let acc_name = acc_array[i];\n\n      if (!this.states.has(acc_name)) {\n        this.error = \"Accepting state \" + acc_name + \" does not exist\";\n        return false;\n      }\n\n      this.states.get(acc_name).accepting = true;\n      this.accepting.push(this.states.get(acc_name));\n    }\n\n    return true;\n  } // Checks that transitions are valid symbols/states/states, and are not duplicates of prior transitions\n  // Sets up connections to check all states are connected\n\n\n  checkTransitions() {\n    if (this.transitions.length === 0) {\n      this.error = \"Empty transitions\";\n      return false;\n    }\n\n    for (let i in this.transitions) {\n      let t = this.transitions[i];\n\n      if (!this.syms.has(t.symbol)) {\n        this.error = \"Invalid symbol in transition: (\" + t.symbol + \", \" + t.source + \", \" + t.dest + \")\";\n        return false;\n      }\n\n      if (!this.states.has(t.source)) {\n        this.error = \"Invalid source in transition: (\" + t.symbol + \", \" + t.source + \", \" + t.dest + \")\";\n        return false;\n      }\n\n      if (!this.states.has(t.dest)) {\n        this.error = \"Invalid destination in transition: (\" + t.symbol + \", \" + t.source + \", \" + t.dest + \")\";\n        return false;\n      }\n\n      t.source = this.states.get(t.source);\n      t.dest = this.states.get(t.dest);\n      let src_state = t.source;\n\n      for (let j in src_state.getAllTrans()) {\n        let ts = src_state.getAllTrans()[j];\n\n        if (ts.left === t.symbol && ts.right === t.dest) {\n          this.error = \"Transition (\" + t.symbol + \", \" + t.source.name + \", \" + t.dest.name + \") already exists\";\n          return false;\n        }\n      }\n\n      src_state.addTrans(t.symbol, t.dest);\n      t.dest.addDestOf(src_state, t.symbol); // Add the dest State to source.conn for connection check\n\n      if (!t.source.conn.includes(t.dest)) {\n        t.source.conn.push(t.dest);\n      }\n    }\n\n    return true;\n  } // uses conn lists in states to set connected to bool value\n\n\n  makeConnected(start) {\n    for (let i in start.conn) {\n      let s = start.conn[i];\n\n      if (!s.connected) {\n        s.connected = true;\n        this.makeConnected(s);\n      }\n    }\n  } // start at back of array and go back picking options from the previous set that have transitions that go to the current state chosen\n\n\n  backtrack() {}\n\n} // parse states string input into NFAState array\n\nexport function parseNFAStates(input) {\n  input = input.replaceAll(\" \", \"\");\n  if (input.length === 0) return [];\n  let input_array = input.split(',');\n  let states_array = [];\n\n  for (let i in input_array) {\n    let str_state = input_array[i];\n    states_array[i] = new NFAState(str_state);\n  }\n\n  return states_array;\n}","map":{"version":3,"names":["parseAlphabet","parseTransition","Pair","constructor","left","right","equalTo","other","NFAState","name","accepting","connected","conn","transitions","destOf","addTrans","symbol","dest","push","getAllTrans","getEpsilonTrans","ret_list","i","ts","getSymbolTrans","sym","addDestOf","state","newPair","NFAModel","initial","all_states","alphabet","console","log","all","parseNFAStates","current","Set","syms","states","error","setPath","input","acceptance_result","checkAlphabet","window","alert","checkStates","checkInitial","checkAccepting","checkTransitions","makeConnected","s","acceptString","ret_path","a","accept_state","acceptance","fail_state","failure","checkInputString","next","add","eps_trans","length","trans","next_eps","str","substring","passing","sym_trans","size","b","stt","has","delete","symbols","Map","set","get","acc_array","acc_name","t","source","src_state","j","includes","start","backtrack","replaceAll","input_array","split","states_array","str_state"],"sources":["/Users/simonlow/Documents/ModelsOfCompSimulator-2/client/src/components/input/NFAModel.js"],"sourcesContent":["import { parseAlphabet, parseTransition } from \"./DFAModel\";\n\nexport class Pair {\n    constructor(left, right) {\n        this.left = left;\n        this.right = right;\n    }\n\n    equalTo(other) {\n        if ((this.left === other.left) && (this.right === other.right)) return true;\n        return false;\n    }\n}\n\nexport class NFAState {\n    constructor(name) {\n        this.name = name;\n        this.accepting = false;\n        this.connected = false;\n        this.conn = [];\n        this.transitions = [];\n        this.destOf = [];\n    }\n\n    addTrans(symbol, dest) {\n        this.transitions.push(new Pair(symbol, dest));\n    }\n\n    getAllTrans() {\n        return this.transitions;\n    }\n\n    // return an array of only epsilon transitions\n    getEpsilonTrans() {\n        let ret_list = [];\n        for (let i in this.transitions) {\n            let ts = this.transitions[i];\n            if (ts.left === \"eps\") {\n                ret_list.push(ts);\n            }\n        }\n        return ret_list;\n    }\n\n    // return an array of only non-epsilon transitions\n    getSymbolTrans(sym) {\n        let ret_list = [];\n        for (let i in this.transitions) {\n            let ts = this.transitions[i];\n            if (ts.left === sym) {\n                ret_list.push(ts);\n            }\n        }\n        return ret_list;\n    }\n\n    addDestOf(state, symbol) {\n        let newPair = new Pair(state, symbol);\n        this.destOf.push(newPair);\n    }\n}\n\nexport class NFAModel {\n    constructor(initial, accepting, all_states, alphabet, transitions) {\n        console.log(\"NFA Model:\");\n        this.all = parseNFAStates(all_states);\n        this.initial = null;\n        this.accepting = [];\n        this.alphabet = parseAlphabet(alphabet);\n        this.transitions = parseTransition(transitions);\n        this.current = new Set();\n        this.syms = null;\n        this.states = null;\n        this.error = null;\n        this.setPath = [];\n        this.input = null;\n        this.acceptance_result = null;\n\n        console.log(\"initial: \", initial);\n        console.log(\"accepting: \", accepting);\n        console.log(\"states: \", all_states);\n        console.log(\"alphabet: \", alphabet);\n        console.log(\"transitions: \", transitions);\n\n        // check components and alert if error\n        if (!this.checkAlphabet()) {\n            window.alert(this.error);\n        } else if (!this.checkStates()) {\n            window.alert(this.error);\n        } else if (!this.checkInitial(initial)) {\n            window.alert(this.error);\n        } else if (!this.checkAccepting(accepting)) {\n            window.alert(this.error);\n        } else if (!this.checkTransitions()) {\n            window.alert(this.error);\n        } else {\n            // make Connected for all and check\n            this.makeConnected(this.initial);\n            for (let i in this.all) {\n                let s = this.all[i];\n                if (!s.connected) {\n                    console.log(\"State \" + s.name + \" is not reachable.\");\n                }\n            }\n        }\n    }\n\n    // once checkInputString has run, determine whether or not to accept input\n    acceptString() {\n        let ret_path = [];\n        //console.log(this.setPath);\n        for (let a of this.current) {\n            if (a.accepting) {\n                // create acceptance visualization and add it to end of path\n                let accept_state = new NFAState(\"üôÇ\");\n                let acceptance = new Pair(\"‚úîÔ∏è\", accept_state);\n                ret_path.push(acceptance);\n                this.acceptance_result = true;\n                return ret_path;\n            }\n        }\n        // if not accepting, create fail visualization and add it to end of path\n        let fail_state = new NFAState(\"üôÅ\");\n        let failure = new Pair(\"‚ùå\", fail_state);\n        ret_path.push(failure);\n        this.acceptance_result = false;\n        return ret_path;\n    }\n\n    // given an input string, simulate it in the NFA model\n    checkInputString(input) {\n        // create Set to represent next states and initialize current Set to initial state\n        let next = new Set();\n        this.current = new Set().add(this.initial);\n        this.input = input;\n\n        // add all epsilon transitons from initial state\n        let eps_trans = this.initial.getEpsilonTrans();\n        if (eps_trans.length !== 0) {\n            this.setPath.push(this.current);\n            for (let trans of eps_trans) {\n                next.add(trans.right);\n            }\n            for (let a of next) {\n                let next_eps = a.getEpsilonTrans();\n                if (next_eps.length !== 0) {\n                    for (let trans of next_eps) {\n                        next.add(trans.right);\n                    } \n                }\n            }\n            next.add(this.initial);\n            this.current = next;\n            this.setPath.push(this.current);\n        }\n\n        // loop through input\n        while (input.length > 0) {\n            let str = input.substring(0, 1);\n            input = input.substring(1);\n            let next = new Set();\n\n            let passing = new Set();\n\n            for (let a of this.current) {\n                let sym_trans = a.getSymbolTrans(str);\n                let eps_trans = a.getEpsilonTrans();\n                if (sym_trans.length !== 0) {\n                    for (let trans of sym_trans) {\n                        next.add(trans.right);\n                        passing.add(a);\n                    }\n                }\n                if (eps_trans.length !== 0) {\n                    passing.add(a);\n                }\n            }\n\n            // if there are no possible next states for the input, the input is rejected\n            if (next.size === 0 && input.length !== 0) {\n                console.log(\"no possible next states\");\n                let ret_path = [new Pair(\"\", this.initial)];\n                let fail_state = new NFAState(\"üôÅ\");\n                let failure = new Pair(\"‚ùå\", fail_state);\n                ret_path.push(failure);\n                this.acceptance_result = false;\n                return ret_path;\n            }\n\n            for (let b of next) {\n                let eps_trans = b.getEpsilonTrans();\n                if (eps_trans !== 0) {\n                    for (let trans of eps_trans) {\n                        next.add(trans.right);\n                        passing.add(b);\n                    }\n                }\n            } \n            \n            for (let stt of this.current) {\n                if (!passing.has(stt)) {\n                    this.current.delete(stt);\n                }\n            }\n\n            this.setPath.push(this.current);\n            this.current = next;\n        }\n        this.setPath.push(this.current);\n        return this.acceptString();\n    }\n\n    // Checks alphabet for repeated symbols or being empty\n    checkAlphabet() {\n        if (this.alphabet.length === 0) {\n            this.error = \"Empty alphabet\";\n            return false;\n        }\n\n        let symbols = new Set();\n        symbols.add(\"eps\");\n        for (let i in this.alphabet) {\n            let s = this.alphabet[i];\n            if (symbols.has(s)) {\n                this.error = \"Duplicate in alphabet: \" + s;\n                return false;\n            }\n            symbols.add(s);\n        }\n\n        this.syms = symbols;\n        return true;\n    }\n\n    // Checks states for repeats or conflicts with alphabet\n    // Creates a Map of state names to States (this.states)\n    checkStates() {\n        if (this.all.length === 0) {\n            this.error = \"Empty States\";\n            return false;\n        }\n\n        let states = new Map();\n        for (let i in this.all) {\n            let s = this.all[i];\n            if (states.has(s.name) || this.syms.has(s.name)) {\n                this.error = \"Conflicting state name: \" + s.name;\n                return false;\n            }\n            states.set(s.name, s);\n        }\n\n        this.states = states;\n        return true;\n    }\n\n    // Checks that initial state is a valid state and assigns this.initial to the State\n    checkInitial(initial) {\n        if (this.states.has(initial)) {\n            this.initial = this.states.get(initial);\n            this.initial.connected = true;\n            return true;\n        }\n        this.error = \"Invalid initial state\";\n        return false;\n    }\n\n    // Checks that accepting states are present and valid\n    // Creates an array of the appropriate accepting States in this.accepting\n    checkAccepting(accepting) {\n        let acc_array = parseAlphabet(accepting);\n        if (acc_array.length === 0) {\n            this.error = \"Empty accepting states\";\n            return false;\n        }\n\n        for (let i in acc_array) {\n            let acc_name = acc_array[i];\n            if (!this.states.has(acc_name)) {\n                this.error = \"Accepting state \" + acc_name + \" does not exist\";\n                return false;\n            }\n            this.states.get(acc_name).accepting = true;\n            this.accepting.push(this.states.get(acc_name));\n        }\n        return true;\n    }\n\n    // Checks that transitions are valid symbols/states/states, and are not duplicates of prior transitions\n    // Sets up connections to check all states are connected\n    checkTransitions() {\n        if (this.transitions.length === 0) {\n            this.error = \"Empty transitions\";\n            return false;\n        }\n\n        for (let i in this.transitions) {\n            let t = this.transitions[i];\n\n            if (!this.syms.has(t.symbol)) {\n                this.error = \"Invalid symbol in transition: (\" + t.symbol + \", \" + t.source + \", \" + t.dest + \")\";\n                return false;\n            }\n            if (!this.states.has(t.source)) {\n                this.error = \"Invalid source in transition: (\" + t.symbol + \", \" + t.source + \", \" + t.dest + \")\";\n                return false;\n            }\n            if (!this.states.has(t.dest)) {\n                this.error = \"Invalid destination in transition: (\" + t.symbol + \", \" + t.source + \", \" + t.dest + \")\";\n                return false;\n            }\n\n            t.source = this.states.get(t.source);\n            t.dest = this.states.get(t.dest);\n\n            let src_state = t.source;\n            for (let j in src_state.getAllTrans()) {\n                let ts = src_state.getAllTrans()[j];\n                if ((ts.left === t.symbol) && (ts.right === t.dest)) {\n                    this.error = \"Transition (\" + t.symbol + \", \" + t.source.name + \", \" + t.dest.name + \") already exists\";\n                    return false;\n                }\n            }\n            src_state.addTrans(t.symbol, t.dest);\n            t.dest.addDestOf(src_state, t.symbol);\n\n            // Add the dest State to source.conn for connection check\n            if (!t.source.conn.includes(t.dest)) {\n                t.source.conn.push(t.dest);\n            }\n        }\n        return true;\n    }\n\n    // uses conn lists in states to set connected to bool value\n    makeConnected(start) {\n        for (let i in start.conn) {\n            let s = start.conn[i];\n            if (!s.connected) {\n                s.connected = true;\n                this.makeConnected(s);\n            }\n        }\n    }\n\n    // start at back of array and go back picking options from the previous set that have transitions that go to the current state chosen\n    backtrack() {\n        \n    }\n}\n\n// parse states string input into NFAState array\nexport function parseNFAStates(input) {\n    input = input.replaceAll(\" \", \"\");\n    if (input.length === 0) return [];\n    let input_array = input.split(',');\n    let states_array = [];\n    for (let i in input_array) {\n        let str_state = input_array[i];\n        states_array[i] = new NFAState(str_state);\n    }\n    return states_array;\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}